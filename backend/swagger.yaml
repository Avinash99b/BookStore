openapi: 3.0.3
info:
  title: Multi-Seller Bookstore API
  description: API documentation for Multi-Seller Bookstore App
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [buyer, seller]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Book:
      type: object
      properties:
        id:
          type: integer
        seller_id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        image_url:
          type: string
        created_at:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        buyer_id:
          type: integer
        seller_id:
          type: integer
        book_id:
          type: integer
        quantity:
          type: integer
        total_price:
          type: number
        status:
          type: string
          enum: [Pending, Shipped, Delivered, Cancelled]
        created_at:
          type: string
        updated_at:
          type: string
    CartItem:
      type: object
      properties:
        id:
          type: integer
        buyer_id:
          type: integer
        book_id:
          type: integer
        quantity:
          type: integer
        created_at:
          type: string

security:
  - bearerAuth: []

tags:
  - name: Auth
  - name: Books
  - name: Cart
  - name: Orders

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [buyer, seller]
            example:
              name: John Doe
              email: john@example.com
              password: password123
              role: buyer
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
  /auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: john@example.com
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /books:
    get:
      summary: List all books
      tags: [Books]
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book (seller only)
      tags: [Books]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image_url:
                  type: string
            example:
              title: Example Book
              description: A great book
              price: 19.99
              stock: 10
              image_url: https://example.com/book.jpg
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
  /books/my:
    get:
      summary: List books for the authenticated seller
      tags: [Books]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of seller's books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Get book by ID
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    patch:
      summary: Update a book (seller only)
      tags: [Books]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image_url:
                  type: string
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '404':
          description: Book not found
    delete:
      summary: Delete a book (seller only)
      tags: [Books]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Book deleted
        '404':
          description: Book not found

  /cart:
    post:
      summary: Add item to cart (buyer only)
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: integer
                quantity:
                  type: integer
            example:
              book_id: 1
              quantity: 2
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          description: Invalid input
    get:
      summary: Get current user's cart (buyer only)
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
    delete:
      summary: Clear the cart (buyer only)
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Cart cleared
  /cart/{id}:
    patch:
      summary: Update a cart item (buyer only)
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
            example:
              quantity: 3
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '404':
          description: Cart item not found
    delete:
      summary: Remove a cart item (buyer only)
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Cart item removed
        '404':
          description: Cart item not found

  /orders:
    post:
      summary: Place an order (buyer only)
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_item_ids:
                  type: array
                  items:
                    type: integer
            example:
              cart_item_ids: [1, 2]
      responses:
        '201':
          description: Order placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
  /orders/seller:
    get:
      summary: Get seller's orders (seller only)
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of seller's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{id}:
    patch:
      summary: Update order status (seller only)
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Pending, Shipped, Delivered, Cancelled]
            example:
              status: Shipped
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
