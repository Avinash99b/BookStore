openapi: 3.0.3
info:
  title: Multi-Seller Bookstore API
  description: API documentation for Multi-Seller Bookstore App
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [buyer, seller]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Book:
      type: object
      properties:
        id:
          type: integer
        seller_id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        image_url:
          type: string
        created_at:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        buyer_id:
          type: integer
        seller_id:
          type: integer
        book_id:
          type: integer
        quantity:
          type: integer
        total_price:
          type: number
        status:
          type: string
          enum: [Pending, Shipped, Delivered, Cancelled]
        created_at:
          type: string
        updated_at:
          type: string
    CartItem:
      type: object
      properties:
        id:
          type: integer
        buyer_id:
          type: integer
        book_id:
          type: integer
        quantity:
          type: integer
        created_at:
          type: string
security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [ Auth ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [ buyer, seller ]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request / Email exists
  /auth/login:
    post:
      summary: Login user
      tags: [ Auth ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials

  /books:
    post:
      summary: Add a new book (seller only)
      tags: [ Books ]
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - price
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image_url:
                  type: string
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                type: object
                properties:
                  book:
                    $ref: '#/components/schemas/Book'
    get:
      summary: Get all books (public)
      tags: [ Books ]
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'

  /books/my:
    get:
      summary: Get seller's books
      tags: [ Books ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Seller books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'

  /books/{id}:
    get:
      summary: Get Specific Book Details
      tags: [ Books ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book Fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    patch:
      summary: Update book (seller only)
      tags: [ Books ]
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image_url:
                  type: string
      responses:
        '200':
          description: Book updated
    delete:
      summary: Delete book
      tags: [ Books ]
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book deleted

  /orders/seller:
    get:
      summary: Get seller's orders
      tags: [ Orders ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Seller orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /orders/{id}:
    patch:
      summary: Update order status
      tags: [ Orders ]
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [ Pending, Shipped, Delivered, Cancelled ]
      responses:
        '200':
          description: Order updated

  /cart:
    post:
      summary: Add item to cart
      tags: [ Cart ]
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: integer
                quantity:
                  type: integer
      responses:
        '201':
          description: Item added
    get:
      summary: Get buyer cart
      tags: [ Cart ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Cart items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
    delete:
      summary: Clear buyer cart
      tags: [ Cart ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Cart cleared

  /cart/{id}:
    patch:
      summary: Update cart item quantity
      tags: [ Cart ]
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item updated
    delete:
      summary: Remove cart item
      tags: [ Cart ]
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item removed
